// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iva.proto

#include "iva.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace iva {
class config_tDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<config_t>
      _instance;
} _config_t_default_instance_;
class acoustics_tDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<acoustics_t>
      _instance;
} _acoustics_t_default_instance_;
}  // namespace iva
namespace protobuf_iva_2eproto {
void InitDefaultsconfig_tImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::iva::_config_t_default_instance_;
    new (ptr) ::iva::config_t();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iva::config_t::InitAsDefaultInstance();
}

void InitDefaultsconfig_t() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsconfig_tImpl);
}

void InitDefaultsacoustics_tImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::iva::_acoustics_t_default_instance_;
    new (ptr) ::iva::acoustics_t();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::iva::acoustics_t::InitAsDefaultInstance();
}

void InitDefaultsacoustics_t() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsacoustics_tImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iva::config_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iva::config_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iva::config_t, beta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iva::config_t, eta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iva::config_t, fft_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iva::config_t, shift_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iva::config_t, source_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iva::config_t, sample_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iva::config_t, window_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iva::config_t, is_debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iva::config_t, if_read_data_),
  0,
  1,
  2,
  3,
  4,
  7,
  8,
  6,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iva::acoustics_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iva::acoustics_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::iva::acoustics_t, data_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::iva::config_t)},
  { 23, 29, sizeof(::iva::acoustics_t)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::iva::_config_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::iva::_acoustics_t_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "iva.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tiva.proto\022\003iva\"\311\001\n\010config_t\022\014\n\004beta\030\001 "
      "\002(\002\022\013\n\003eta\030\002 \002(\002\022\022\n\nfft_length\030\003 \002(\005\022\022\n\n"
      "shift_size\030\004 \002(\005\022\022\n\nsource_num\030\005 \002(\005\022\031\n\013"
      "sample_rate\030\006 \001(\005:\0048000\022\026\n\013window_type\030\007"
      " \001(\005:\0011\022\026\n\010is_debug\030\010 \001(\010:\004true\022\033\n\014if_re"
      "ad_data\030\t \001(\010:\005false\"\033\n\013acoustics_t\022\014\n\004d"
      "ata\030\002 \003(\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 249);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "iva.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_iva_2eproto
namespace iva {

// ===================================================================

void config_t::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int config_t::kBetaFieldNumber;
const int config_t::kEtaFieldNumber;
const int config_t::kFftLengthFieldNumber;
const int config_t::kShiftSizeFieldNumber;
const int config_t::kSourceNumFieldNumber;
const int config_t::kSampleRateFieldNumber;
const int config_t::kWindowTypeFieldNumber;
const int config_t::kIsDebugFieldNumber;
const int config_t::kIfReadDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

config_t::config_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_iva_2eproto::InitDefaultsconfig_t();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iva.config_t)
}
config_t::config_t(const config_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&beta_, &from.beta_,
    static_cast<size_t>(reinterpret_cast<char*>(&window_type_) -
    reinterpret_cast<char*>(&beta_)) + sizeof(window_type_));
  // @@protoc_insertion_point(copy_constructor:iva.config_t)
}

void config_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&beta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&if_read_data_) -
      reinterpret_cast<char*>(&beta_)) + sizeof(if_read_data_));
  is_debug_ = true;
  sample_rate_ = 8000;
  window_type_ = 1;
}

config_t::~config_t() {
  // @@protoc_insertion_point(destructor:iva.config_t)
  SharedDtor();
}

void config_t::SharedDtor() {
}

void config_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* config_t::descriptor() {
  ::protobuf_iva_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_iva_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const config_t& config_t::default_instance() {
  ::protobuf_iva_2eproto::InitDefaultsconfig_t();
  return *internal_default_instance();
}

config_t* config_t::New(::google::protobuf::Arena* arena) const {
  config_t* n = new config_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void config_t::Clear() {
// @@protoc_insertion_point(message_clear_start:iva.config_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&beta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&if_read_data_) -
        reinterpret_cast<char*>(&beta_)) + sizeof(if_read_data_));
    is_debug_ = true;
    sample_rate_ = 8000;
  }
  window_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool config_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iva.config_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float beta = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_beta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float eta = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_eta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 fft_length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_fft_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fft_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 shift_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_shift_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shift_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 source_num = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_source_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sample_rate = 6 [default = 8000];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_sample_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 window_type = 7 [default = 1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_window_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_debug = 8 [default = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_is_debug();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_debug_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool if_read_data = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_if_read_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &if_read_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iva.config_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iva.config_t)
  return false;
#undef DO_
}

void config_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iva.config_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float beta = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->beta(), output);
  }

  // required float eta = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->eta(), output);
  }

  // required int32 fft_length = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fft_length(), output);
  }

  // required int32 shift_size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shift_size(), output);
  }

  // required int32 source_num = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->source_num(), output);
  }

  // optional int32 sample_rate = 6 [default = 8000];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sample_rate(), output);
  }

  // optional int32 window_type = 7 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->window_type(), output);
  }

  // optional bool is_debug = 8 [default = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_debug(), output);
  }

  // optional bool if_read_data = 9 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->if_read_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:iva.config_t)
}

::google::protobuf::uint8* config_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iva.config_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float beta = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->beta(), target);
  }

  // required float eta = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->eta(), target);
  }

  // required int32 fft_length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fft_length(), target);
  }

  // required int32 shift_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shift_size(), target);
  }

  // required int32 source_num = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->source_num(), target);
  }

  // optional int32 sample_rate = 6 [default = 8000];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sample_rate(), target);
  }

  // optional int32 window_type = 7 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->window_type(), target);
  }

  // optional bool is_debug = 8 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_debug(), target);
  }

  // optional bool if_read_data = 9 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->if_read_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iva.config_t)
  return target;
}

size_t config_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:iva.config_t)
  size_t total_size = 0;

  if (has_beta()) {
    // required float beta = 1;
    total_size += 1 + 4;
  }

  if (has_eta()) {
    // required float eta = 2;
    total_size += 1 + 4;
  }

  if (has_fft_length()) {
    // required int32 fft_length = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fft_length());
  }

  if (has_shift_size()) {
    // required int32 shift_size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shift_size());
  }

  if (has_source_num()) {
    // required int32 source_num = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source_num());
  }

  return total_size;
}
size_t config_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iva.config_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required float beta = 1;
    total_size += 1 + 4;

    // required float eta = 2;
    total_size += 1 + 4;

    // required int32 fft_length = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fft_length());

    // required int32 shift_size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shift_size());

    // required int32 source_num = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional bool if_read_data = 9 [default = false];
    if (has_if_read_data()) {
      total_size += 1 + 1;
    }

    // optional bool is_debug = 8 [default = true];
    if (has_is_debug()) {
      total_size += 1 + 1;
    }

    // optional int32 sample_rate = 6 [default = 8000];
    if (has_sample_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sample_rate());
    }

  }
  // optional int32 window_type = 7 [default = 1];
  if (has_window_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->window_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void config_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iva.config_t)
  GOOGLE_DCHECK_NE(&from, this);
  const config_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const config_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iva.config_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iva.config_t)
    MergeFrom(*source);
  }
}

void config_t::MergeFrom(const config_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iva.config_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      beta_ = from.beta_;
    }
    if (cached_has_bits & 0x00000002u) {
      eta_ = from.eta_;
    }
    if (cached_has_bits & 0x00000004u) {
      fft_length_ = from.fft_length_;
    }
    if (cached_has_bits & 0x00000008u) {
      shift_size_ = from.shift_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      source_num_ = from.source_num_;
    }
    if (cached_has_bits & 0x00000020u) {
      if_read_data_ = from.if_read_data_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_debug_ = from.is_debug_;
    }
    if (cached_has_bits & 0x00000080u) {
      sample_rate_ = from.sample_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_window_type(from.window_type());
  }
}

void config_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iva.config_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void config_t::CopyFrom(const config_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iva.config_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool config_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void config_t::Swap(config_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void config_t::InternalSwap(config_t* other) {
  using std::swap;
  swap(beta_, other->beta_);
  swap(eta_, other->eta_);
  swap(fft_length_, other->fft_length_);
  swap(shift_size_, other->shift_size_);
  swap(source_num_, other->source_num_);
  swap(if_read_data_, other->if_read_data_);
  swap(is_debug_, other->is_debug_);
  swap(sample_rate_, other->sample_rate_);
  swap(window_type_, other->window_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata config_t::GetMetadata() const {
  protobuf_iva_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_iva_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void acoustics_t::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int acoustics_t::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

acoustics_t::acoustics_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_iva_2eproto::InitDefaultsacoustics_t();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iva.acoustics_t)
}
acoustics_t::acoustics_t(const acoustics_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iva.acoustics_t)
}

void acoustics_t::SharedCtor() {
  _cached_size_ = 0;
}

acoustics_t::~acoustics_t() {
  // @@protoc_insertion_point(destructor:iva.acoustics_t)
  SharedDtor();
}

void acoustics_t::SharedDtor() {
}

void acoustics_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* acoustics_t::descriptor() {
  ::protobuf_iva_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_iva_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const acoustics_t& acoustics_t::default_instance() {
  ::protobuf_iva_2eproto::InitDefaultsacoustics_t();
  return *internal_default_instance();
}

acoustics_t* acoustics_t::New(::google::protobuf::Arena* arena) const {
  acoustics_t* n = new acoustics_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void acoustics_t::Clear() {
// @@protoc_insertion_point(message_clear_start:iva.acoustics_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool acoustics_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iva.acoustics_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iva.acoustics_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iva.acoustics_t)
  return false;
#undef DO_
}

void acoustics_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iva.acoustics_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 2;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:iva.acoustics_t)
}

::google::protobuf::uint8* acoustics_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:iva.acoustics_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->data_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:iva.acoustics_t)
  return target;
}

size_t acoustics_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iva.acoustics_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->data_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void acoustics_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iva.acoustics_t)
  GOOGLE_DCHECK_NE(&from, this);
  const acoustics_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const acoustics_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iva.acoustics_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iva.acoustics_t)
    MergeFrom(*source);
  }
}

void acoustics_t::MergeFrom(const acoustics_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iva.acoustics_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void acoustics_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iva.acoustics_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void acoustics_t::CopyFrom(const acoustics_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iva.acoustics_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool acoustics_t::IsInitialized() const {
  return true;
}

void acoustics_t::Swap(acoustics_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void acoustics_t::InternalSwap(acoustics_t* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata acoustics_t::GetMetadata() const {
  protobuf_iva_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_iva_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace iva

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iva.proto

#ifndef PROTOBUF_iva_2eproto__INCLUDED
#define PROTOBUF_iva_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_iva_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsconfig_tImpl();
void InitDefaultsconfig_t();
void InitDefaultsacoustics_tImpl();
void InitDefaultsacoustics_t();
inline void InitDefaults() {
  InitDefaultsconfig_t();
  InitDefaultsacoustics_t();
}
}  // namespace protobuf_iva_2eproto
namespace iva {
class acoustics_t;
class acoustics_tDefaultTypeInternal;
extern acoustics_tDefaultTypeInternal _acoustics_t_default_instance_;
class config_t;
class config_tDefaultTypeInternal;
extern config_tDefaultTypeInternal _config_t_default_instance_;
}  // namespace iva
namespace iva {

// ===================================================================

class config_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:iva.config_t) */ {
 public:
  config_t();
  virtual ~config_t();

  config_t(const config_t& from);

  inline config_t& operator=(const config_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  config_t(config_t&& from) noexcept
    : config_t() {
    *this = ::std::move(from);
  }

  inline config_t& operator=(config_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const config_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const config_t* internal_default_instance() {
    return reinterpret_cast<const config_t*>(
               &_config_t_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(config_t* other);
  friend void swap(config_t& a, config_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline config_t* New() const PROTOBUF_FINAL { return New(NULL); }

  config_t* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const config_t& from);
  void MergeFrom(const config_t& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(config_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float beta = 1;
  bool has_beta() const;
  void clear_beta();
  static const int kBetaFieldNumber = 1;
  float beta() const;
  void set_beta(float value);

  // required float eta = 2;
  bool has_eta() const;
  void clear_eta();
  static const int kEtaFieldNumber = 2;
  float eta() const;
  void set_eta(float value);

  // required int32 fft_length = 3;
  bool has_fft_length() const;
  void clear_fft_length();
  static const int kFftLengthFieldNumber = 3;
  ::google::protobuf::int32 fft_length() const;
  void set_fft_length(::google::protobuf::int32 value);

  // required int32 shift_size = 4;
  bool has_shift_size() const;
  void clear_shift_size();
  static const int kShiftSizeFieldNumber = 4;
  ::google::protobuf::int32 shift_size() const;
  void set_shift_size(::google::protobuf::int32 value);

  // required int32 source_num = 5;
  bool has_source_num() const;
  void clear_source_num();
  static const int kSourceNumFieldNumber = 5;
  ::google::protobuf::int32 source_num() const;
  void set_source_num(::google::protobuf::int32 value);

  // optional bool if_read_data = 9 [default = false];
  bool has_if_read_data() const;
  void clear_if_read_data();
  static const int kIfReadDataFieldNumber = 9;
  bool if_read_data() const;
  void set_if_read_data(bool value);

  // optional bool is_debug = 8 [default = true];
  bool has_is_debug() const;
  void clear_is_debug();
  static const int kIsDebugFieldNumber = 8;
  bool is_debug() const;
  void set_is_debug(bool value);

  // optional int32 sample_rate = 6 [default = 8000];
  bool has_sample_rate() const;
  void clear_sample_rate();
  static const int kSampleRateFieldNumber = 6;
  ::google::protobuf::int32 sample_rate() const;
  void set_sample_rate(::google::protobuf::int32 value);

  // optional int32 window_type = 7 [default = 1];
  bool has_window_type() const;
  void clear_window_type();
  static const int kWindowTypeFieldNumber = 7;
  ::google::protobuf::int32 window_type() const;
  void set_window_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:iva.config_t)
 private:
  void set_has_beta();
  void clear_has_beta();
  void set_has_eta();
  void clear_has_eta();
  void set_has_fft_length();
  void clear_has_fft_length();
  void set_has_shift_size();
  void clear_has_shift_size();
  void set_has_source_num();
  void clear_has_source_num();
  void set_has_sample_rate();
  void clear_has_sample_rate();
  void set_has_window_type();
  void clear_has_window_type();
  void set_has_is_debug();
  void clear_has_is_debug();
  void set_has_if_read_data();
  void clear_has_if_read_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float beta_;
  float eta_;
  ::google::protobuf::int32 fft_length_;
  ::google::protobuf::int32 shift_size_;
  ::google::protobuf::int32 source_num_;
  bool if_read_data_;
  bool is_debug_;
  ::google::protobuf::int32 sample_rate_;
  ::google::protobuf::int32 window_type_;
  friend struct ::protobuf_iva_2eproto::TableStruct;
  friend void ::protobuf_iva_2eproto::InitDefaultsconfig_tImpl();
};
// -------------------------------------------------------------------

class acoustics_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:iva.acoustics_t) */ {
 public:
  acoustics_t();
  virtual ~acoustics_t();

  acoustics_t(const acoustics_t& from);

  inline acoustics_t& operator=(const acoustics_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  acoustics_t(acoustics_t&& from) noexcept
    : acoustics_t() {
    *this = ::std::move(from);
  }

  inline acoustics_t& operator=(acoustics_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const acoustics_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const acoustics_t* internal_default_instance() {
    return reinterpret_cast<const acoustics_t*>(
               &_acoustics_t_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(acoustics_t* other);
  friend void swap(acoustics_t& a, acoustics_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline acoustics_t* New() const PROTOBUF_FINAL { return New(NULL); }

  acoustics_t* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const acoustics_t& from);
  void MergeFrom(const acoustics_t& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(acoustics_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:iva.acoustics_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > data_;
  friend struct ::protobuf_iva_2eproto::TableStruct;
  friend void ::protobuf_iva_2eproto::InitDefaultsacoustics_tImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// config_t

// required float beta = 1;
inline bool config_t::has_beta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void config_t::set_has_beta() {
  _has_bits_[0] |= 0x00000001u;
}
inline void config_t::clear_has_beta() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void config_t::clear_beta() {
  beta_ = 0;
  clear_has_beta();
}
inline float config_t::beta() const {
  // @@protoc_insertion_point(field_get:iva.config_t.beta)
  return beta_;
}
inline void config_t::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:iva.config_t.beta)
}

// required float eta = 2;
inline bool config_t::has_eta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void config_t::set_has_eta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void config_t::clear_has_eta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void config_t::clear_eta() {
  eta_ = 0;
  clear_has_eta();
}
inline float config_t::eta() const {
  // @@protoc_insertion_point(field_get:iva.config_t.eta)
  return eta_;
}
inline void config_t::set_eta(float value) {
  set_has_eta();
  eta_ = value;
  // @@protoc_insertion_point(field_set:iva.config_t.eta)
}

// required int32 fft_length = 3;
inline bool config_t::has_fft_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void config_t::set_has_fft_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void config_t::clear_has_fft_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void config_t::clear_fft_length() {
  fft_length_ = 0;
  clear_has_fft_length();
}
inline ::google::protobuf::int32 config_t::fft_length() const {
  // @@protoc_insertion_point(field_get:iva.config_t.fft_length)
  return fft_length_;
}
inline void config_t::set_fft_length(::google::protobuf::int32 value) {
  set_has_fft_length();
  fft_length_ = value;
  // @@protoc_insertion_point(field_set:iva.config_t.fft_length)
}

// required int32 shift_size = 4;
inline bool config_t::has_shift_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void config_t::set_has_shift_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void config_t::clear_has_shift_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void config_t::clear_shift_size() {
  shift_size_ = 0;
  clear_has_shift_size();
}
inline ::google::protobuf::int32 config_t::shift_size() const {
  // @@protoc_insertion_point(field_get:iva.config_t.shift_size)
  return shift_size_;
}
inline void config_t::set_shift_size(::google::protobuf::int32 value) {
  set_has_shift_size();
  shift_size_ = value;
  // @@protoc_insertion_point(field_set:iva.config_t.shift_size)
}

// required int32 source_num = 5;
inline bool config_t::has_source_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void config_t::set_has_source_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void config_t::clear_has_source_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void config_t::clear_source_num() {
  source_num_ = 0;
  clear_has_source_num();
}
inline ::google::protobuf::int32 config_t::source_num() const {
  // @@protoc_insertion_point(field_get:iva.config_t.source_num)
  return source_num_;
}
inline void config_t::set_source_num(::google::protobuf::int32 value) {
  set_has_source_num();
  source_num_ = value;
  // @@protoc_insertion_point(field_set:iva.config_t.source_num)
}

// optional int32 sample_rate = 6 [default = 8000];
inline bool config_t::has_sample_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void config_t::set_has_sample_rate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void config_t::clear_has_sample_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void config_t::clear_sample_rate() {
  sample_rate_ = 8000;
  clear_has_sample_rate();
}
inline ::google::protobuf::int32 config_t::sample_rate() const {
  // @@protoc_insertion_point(field_get:iva.config_t.sample_rate)
  return sample_rate_;
}
inline void config_t::set_sample_rate(::google::protobuf::int32 value) {
  set_has_sample_rate();
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:iva.config_t.sample_rate)
}

// optional int32 window_type = 7 [default = 1];
inline bool config_t::has_window_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void config_t::set_has_window_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void config_t::clear_has_window_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void config_t::clear_window_type() {
  window_type_ = 1;
  clear_has_window_type();
}
inline ::google::protobuf::int32 config_t::window_type() const {
  // @@protoc_insertion_point(field_get:iva.config_t.window_type)
  return window_type_;
}
inline void config_t::set_window_type(::google::protobuf::int32 value) {
  set_has_window_type();
  window_type_ = value;
  // @@protoc_insertion_point(field_set:iva.config_t.window_type)
}

// optional bool is_debug = 8 [default = true];
inline bool config_t::has_is_debug() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void config_t::set_has_is_debug() {
  _has_bits_[0] |= 0x00000040u;
}
inline void config_t::clear_has_is_debug() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void config_t::clear_is_debug() {
  is_debug_ = true;
  clear_has_is_debug();
}
inline bool config_t::is_debug() const {
  // @@protoc_insertion_point(field_get:iva.config_t.is_debug)
  return is_debug_;
}
inline void config_t::set_is_debug(bool value) {
  set_has_is_debug();
  is_debug_ = value;
  // @@protoc_insertion_point(field_set:iva.config_t.is_debug)
}

// optional bool if_read_data = 9 [default = false];
inline bool config_t::has_if_read_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void config_t::set_has_if_read_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void config_t::clear_has_if_read_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void config_t::clear_if_read_data() {
  if_read_data_ = false;
  clear_has_if_read_data();
}
inline bool config_t::if_read_data() const {
  // @@protoc_insertion_point(field_get:iva.config_t.if_read_data)
  return if_read_data_;
}
inline void config_t::set_if_read_data(bool value) {
  set_has_if_read_data();
  if_read_data_ = value;
  // @@protoc_insertion_point(field_set:iva.config_t.if_read_data)
}

// -------------------------------------------------------------------

// acoustics_t

// repeated float data = 2;
inline int acoustics_t::data_size() const {
  return data_.size();
}
inline void acoustics_t::clear_data() {
  data_.Clear();
}
inline float acoustics_t::data(int index) const {
  // @@protoc_insertion_point(field_get:iva.acoustics_t.data)
  return data_.Get(index);
}
inline void acoustics_t::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:iva.acoustics_t.data)
}
inline void acoustics_t::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:iva.acoustics_t.data)
}
inline const ::google::protobuf::RepeatedField< float >&
acoustics_t::data() const {
  // @@protoc_insertion_point(field_list:iva.acoustics_t.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
acoustics_t::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:iva.acoustics_t.data)
  return &data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace iva

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_iva_2eproto__INCLUDED
